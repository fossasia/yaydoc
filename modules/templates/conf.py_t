{% if PY3 -%}
#!/usr/bin/env python3
{% endif -%}
from __future__ import print_function
# -*- coding: utf-8 -*-
#
# {{ project }} documentation build configuration file, created by
# sphinx-quickstart on {{ now }}.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
{% if append_syspath -%}
import os
import sys
sys.path.insert(0, u'{{ module_path }}')
{% else -%}
# import os
# import sys
{% if module_path -%}
# sys.path.insert(0, u'{{ module_path }}')
{% else -%}
# sys.path.insert(0, os.path.abspath('.'))
{% endif -%}
{% endif %}

import os
import sys
import mock
import pkg_resources
from recommonmark.parser import CommonMarkParser
from recommonmark.transform import AutoStructify

# Adding scripts and extensions directory to sys.path
sys.path.insert(0, os.path.abspath('scripts'))
sys.path.insert(0, os.path.join(os.path.abspath('scripts'), 'extensions'))

from config.serializer import deserialize

{% if autoapi_python == true %}
for (dirpath, dirnames, filenames) in os.walk('{{ root_dir }}'):
    # Directory contains __init__.py. It should be a python package
    if '__init__.py' in filenames:
        # appending instad of inserting at front so that user cannot overwrite
        # some of our own modules.
        sys.path.append(os.path.abspath(os.path.dirname(dirpath)))
{% endif %}

mock_modules = deserialize('{{ mock_modules }}')
sys.modules.update((mod_name, mock.Mock()) for mod_name in mock_modules)

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = ['sphinx.ext.githubpages',
    'sphinx.ext.autodoc',
    'sphinx.ext.napoleon',
    'javasphinx',
    'sphinxcontrib.apiblueprint',
    'blog',
    'timeline',
]

{% if github_ribbon_enable == 'true' %}
extensions.append('sphinxcontrib.github_ribbon')

github_ribbon_repo = '{{ owner }}/{{ repo }}'
github_ribbon_position = '{{ github_ribbon_position }}'
github_ribbon_color = '{{ github_ribbon_color }}'
{% endif %}

{% if github_button_enable == 'true' %}
extensions.append('github_button')

github_user_name = '{{ owner }}'
github_repo = '{{ repo }}'

gh_btns = deserialize('{{ github_buttons }}')
github_button_star = 'star' in gh_btns
github_button_watch = 'watch' in gh_btns
github_button_issues = 'issues' in gh_btns
github_button_fork = 'fork' in gh_btns
github_button_follow = 'follow' in gh_btns

github_button_size = 'large' if deserialize('{{ github_button_large }}') else 'none'
github_button_show_count = '{{ github_button_show_count }}'
{% endif %}

# Add any paths that contain templates here, relative to this directory.
templates_path = ['{{ dot }}templates']

# The parser(s) of source files
source_parsers = {
    '.md': CommonMarkParser,
}

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
source_suffix = ['.rst', '.md']
# source_suffix = '{{ suffix }}'

# The master toctree document.
master_doc = '{{ master_str }}'

# General information about the project.
project = u'{{ project_str }}'
copyright = u'{{ copyright_str }}'
author = u'{{ author_str }}'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = u'{{ version_str }}'
# The full version, including alpha/beta/rc tags.
release = u'{{ release_str }}'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = {{ language | repr }}

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = [{{ exclude_patterns }}]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = {{ ext_todo }}

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#

html_logo = '{{ html_logo }}'

{% if html_theme in (['alabaster', 'classic', 'sphinxdoc', 'scrolls',
                     'agogo', 'traditional', 'nature', 'haiku',
                     'pyramid', 'bizstyle'])
%}
# Theme is builtin. Just set the name
html_theme = '{{ html_theme }}'

{% else %}
# Theme is user defined

# Get all themes locally present in the _themes directory
local_themes = []
for element in os.listdir('_themes'):
    if os.path.isdir(os.path.join('_themes', element)):
        local_themes.append(element)

if '{{ html_theme }}' in local_themes:
    html_theme = '{{ html_theme }}'
    html_theme_path = ['_themes']
else:
    # Theme is a custom python package. Lets install it.
    import pip
    exitcode = pip.main(['install', '-q', '{{ html_theme }}'])

    if exitcode:
        # Non-zero exit code
        print("""{0} is not available on pypi. Please ensure the theme can be installed
        using pip.""".format('{{ html_theme }}'), file=sys.stderr)
        html_theme = 'default'
    else:
        try:
            dist = pkg_resources.get_distribution('{{ html_theme }}')
            dist_path = os.path.join(dist.location, list(dist._get_metadata('top_level.txt'))[0])
        except (pkg_resources.DistributionNotFound, IndexError):
            print("\nError with distribution {0}".format('{{ html_theme }}'))
            html_theme = 'default'
        else:
            theme_path = None
            for root, dirs, files in os.walk(dist_path):
                if 'theme.conf' in files:
                    theme_path = root
                    break

            if theme_path is None:
                print("\n{0} does not appear to be a sphinx theme.".format('{{ html_theme }}'), file=sys.stderr)
                html_theme = 'default'
            else:
                html_theme = os.path.basename(theme_path)
                html_theme_path = [os.path.abspath(os.path.join(theme_path, os.pardir))]
{% endif %}

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {}
theme_opt_keys = deserialize('{{ theme_opts_keys }}')
theme_opt_vals = deserialize('{{ theme_opts_values }}')
for key, value in zip(theme_opt_keys, theme_opt_vals):
    html_theme_options[key] = value

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['{{ dot }}static']

# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = '{{ project_fn }}doc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, '{{ project_fn }}.tex', u'{{ project_doc_texescaped_str }}',
     u'{{ author_texescaped_str }}', 'manual'),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, '{{ project_manpage }}', u'{{ project_doc_str }}',
     [author], 1)
]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, '{{ project_fn }}', u'{{ project_doc_str }}',
     author, '{{ project_fn }}', 'One line description of project.',
     'Miscellaneous'),
]

{% if epub %}

# -- Options for Epub output ----------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project
epub_author = author
epub_publisher = author
epub_copyright = copyright

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']
{% endif %}

{% if ext_intersphinx %}
# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'https://docs.python.org/': None}
{% endif %}

import directives

def setup(app):
    app.add_directive('include', directives.Include)
    app.add_directive('mdinclude', directives.MdInclude)
    app.add_config_value('recommonmark_config', {
        'enable_eval_rst': True,
        'enable_auto_toc_tree': True,
        'auto_toc_tree_section': 'Contents',
        'enable_inline_math': deserialize('{{ enable_inline_math }}'),
    }, True)
    app.add_transform(AutoStructify)
